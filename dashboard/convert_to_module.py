#!/usr/bin/env python3
"""
Script para converter o Dashboard Psicologia em um m√≥dulo integr√°vel
Prepara os arquivos para integra√ß√£o em um site Flask existente
"""

import os
import shutil
import sys
from pathlib import Path

def create_module_structure():
    """Cria a estrutura de m√≥dulo para integra√ß√£o"""
    
    base_dir = Path(__file__).parent
    module_dir = base_dir / "dashboard_psi_module"
    
    print("üèóÔ∏è  Criando estrutura do m√≥dulo...")
    
    # Criar diret√≥rios
    dirs_to_create = [
        module_dir,
        module_dir / "templates" / "dashboard_psi",
        module_dir / "templates" / "dashboard_psi" / "pacientes",
        module_dir / "templates" / "dashboard_psi" / "evolucoes",
        module_dir / "static" / "css",
        module_dir / "static" / "js",
        module_dir / "static" / "img"
    ]
    
    for dir_path in dirs_to_create:
        dir_path.mkdir(parents=True, exist_ok=True)
        print(f"   üìÅ {dir_path.relative_to(base_dir)}")
    
    return module_dir

def copy_and_adapt_files(module_dir):
    """Copia e adapta os arquivos para o m√≥dulo (sem alterar originais)"""
    
    base_dir = Path(__file__).parent
    
    print("\nüìã Copiando arquivos (mantendo originais intactos)...")
    
    # 1. Copiar arquivos Python principais (C√ìPIAS INDEPENDENTES)
    python_files = ['models.py', 'forms.py', 'utils.py']
    for file_name in python_files:
        src = base_dir / "app" / file_name
        dst = module_dir / file_name
        if src.exists():
            # Criar c√≥pia independente
            shutil.copy2(src, dst)
            print(f"   ‚úÖ {file_name} (c√≥pia independente)")
        else:
            print(f"   ‚ö†Ô∏è  {file_name} n√£o encontrado")
    
    # 2. Copiar templates para subdiret√≥rio (C√ìPIAS INDEPENDENTES)
    templates_src = base_dir / "app" / "templates"
    templates_dst = module_dir / "templates" / "dashboard_psi"
    
    if templates_src.exists():
        for template_file in templates_src.glob("*.html"):
            # Criar c√≥pia independente
            shutil.copy2(template_file, templates_dst / template_file.name)
            print(f"   ‚úÖ templates/{template_file.name} (c√≥pia independente)")
    else:
        print("   ‚ö†Ô∏è  Diret√≥rio templates n√£o encontrado")
    
    # 3. Copiar arquivos est√°ticos (C√ìPIAS INDEPENDENTES)
    static_src = base_dir / "app" / "static"
    static_dst = module_dir / "static"
    
    if static_src.exists():
        for static_dir in ['css', 'js', 'img']:
            src_dir = static_src / static_dir
            dst_dir = static_dst / static_dir
            if src_dir.exists():
                # Criar diret√≥rio se n√£o existir
                dst_dir.mkdir(exist_ok=True)
                for file in src_dir.glob("*"):
                    if file.is_file():
                        # Criar c√≥pia independente
                        shutil.copy2(file, dst_dir / file.name)
                        print(f"   ‚úÖ static/{static_dir}/{file.name} (c√≥pia independente)")
    else:
        print("   ‚ö†Ô∏è  Diret√≥rio static n√£o encontrado")
    
    # 4. Copiar arquivo de configura√ß√£o como refer√™ncia
    config_src = base_dir / "config.py"
    if config_src.exists():
        config_dst = module_dir / "config_reference.py"
        shutil.copy2(config_src, config_dst)
        print(f"   ‚úÖ config_reference.py (para refer√™ncia)")
    
    print(f"\nüìÇ Todos os arquivos foram COPIADOS para: {module_dir}")
    print("üîí Os arquivos originais permanecem INTACTOS")

def create_module_init(module_dir):
    """Cria o arquivo __init__.py do m√≥dulo"""
    
    init_content = '''"""
Dashboard Psicologia - M√≥dulo para integra√ß√£o
M√≥dulo Flask para gerenciamento de pacientes e evolu√ß√µes cl√≠nicas
"""

from flask import Blueprint

bp = Blueprint('dashboard_psi', __name__,
               url_prefix='/dashboard-psicologia',
               template_folder='templates',
               static_folder='static',
               static_url_path='/dashboard-psi/static')

from . import routes
'''
    
    init_file = module_dir / "__init__.py"
    with open(init_file, 'w', encoding='utf-8') as f:
        f.write(init_content)
    
    print("   ‚úÖ __init__.py criado")

def create_adapted_routes(module_dir):
    """Cria arquivo de rotas adaptado para integra√ß√£o"""
    
    routes_content = '''# dashboard_psi/routes.py
"""
Rotas do Dashboard Psicologia adaptadas para integra√ß√£o
"""

from flask import render_template, redirect, url_for, flash, request, abort, jsonify
from flask_login import login_required, current_user
from . import bp
from .models import Paciente, Evolucao
from .forms import PacienteForm, EvolucaoForm
from .utils import encrypt_data, decrypt_data
from app import db
from functools import wraps

def psicologo_required(f):
    """Decorator para verificar se o usu√°rio √© psic√≥logo"""
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if not current_user.is_authenticated:
            return redirect(url_for('auth.login'))
        
        # Verificar se √© psic√≥logo (adapte conforme seu modelo User)
        if not hasattr(current_user, 'crp') or not current_user.crp:
            flash('Acesso restrito a psic√≥logos cadastrados.', 'warning')
            abort(403)
            
        return f(*args, **kwargs)
    return decorated_function

# --- Dashboard Principal ---
@bp.route('/')
@psicologo_required
def dashboard():
    """Dashboard principal do m√≥dulo"""
    # Buscar pacientes do psic√≥logo atual
    pacientes = Paciente.query.filter_by(psicologo_id=current_user.id).all()
    
    # Estat√≠sticas
    total_pacientes = len(pacientes)
    total_evolucoes = sum(len(p.evolucoes) for p in pacientes)
    
    # √öltimas evolu√ß√µes
    ultimas_evolucoes = (Evolucao.query
                        .join(Paciente)
                        .filter(Paciente.psicologo_id == current_user.id)
                        .order_by(Evolucao.data_sessao.desc())
                        .limit(5)
                        .all())
    
    return render_template('dashboard_psi/dashboard.html',
                         title='Dashboard Psicologia',
                         pacientes=pacientes,
                         total_pacientes=total_pacientes,
                         total_evolucoes=total_evolucoes,
                         ultimas_evolucoes=ultimas_evolucoes)

# --- Rotas de Pacientes ---
@bp.route('/pacientes')
@psicologo_required
def listar_pacientes():
    """Lista todos os pacientes do psic√≥logo"""
    search = request.args.get('search', '')
    
    query = Paciente.query.filter_by(psicologo_id=current_user.id)
    
    if search:
        query = query.filter(Paciente.nome_completo.contains(search))
    
    pacientes = query.order_by(Paciente.nome_completo).all()
    
    return render_template('dashboard_psi/listar_pacientes.html',
                         title='Pacientes',
                         pacientes=pacientes,
                         search=search)

@bp.route('/pacientes/novo', methods=['GET', 'POST'])
@psicologo_required
def novo_paciente():
    """Cadastrar novo paciente"""
    form = PacienteForm()
    
    if form.validate_on_submit():
        paciente = Paciente(
            nome_completo=form.nome_completo.data,
            data_nascimento=form.data_nascimento.data,
            telefone=form.telefone.data,
            email=form.email.data,
            endereco=form.endereco.data,
            profissao=form.profissao.data,
            estado_civil=form.estado_civil.data,
            contato_emergencia=form.contato_emergencia.data,
            observacoes=form.observacoes.data,
            psicologo_id=current_user.id
        )
        
        db.session.add(paciente)
        db.session.commit()
        
        flash(f'Paciente {paciente.nome_completo} cadastrado com sucesso!', 'success')
        return redirect(url_for('dashboard_psi.perfil_paciente', id=paciente.id))
    
    return render_template('dashboard_psi/form_paciente.html',
                         title='Novo Paciente',
                         form=form)

@bp.route('/pacientes/<int:id>')
@psicologo_required
def perfil_paciente(id):
    """Perfil do paciente com hist√≥rico de evolu√ß√µes"""
    paciente = Paciente.query.filter_by(
        id=id, 
        psicologo_id=current_user.id
    ).first_or_404()
    
    # Buscar evolu√ß√µes com pagina√ß√£o
    page = request.args.get('page', 1, type=int)
    evolucoes = (Evolucao.query
                .filter_by(paciente_id=paciente.id)
                .order_by(Evolucao.data_sessao.desc())
                .paginate(
                    page=page, 
                    per_page=10, 
                    error_out=False
                ))
    
    return render_template('dashboard_psi/perfil_paciente.html',
                         title=f'Paciente: {paciente.nome_completo}',
                         paciente=paciente,
                         evolucoes=evolucoes)

# --- Rotas de Evolu√ß√µes ---
@bp.route('/pacientes/<int:paciente_id>/evolucoes/nova', methods=['GET', 'POST'])
@psicologo_required
def nova_evolucao(paciente_id):
    """Criar nova evolu√ß√£o para o paciente"""
    paciente = Paciente.query.filter_by(
        id=paciente_id,
        psicologo_id=current_user.id
    ).first_or_404()
    
    form = EvolucaoForm()
    
    if form.validate_on_submit():
        evolucao = Evolucao(
            data_sessao=form.data_sessao.data,
            paciente_id=paciente.id
        )
        # Usar criptografia autom√°tica
        evolucao.conteudo = form.conteudo.data
        
        db.session.add(evolucao)
        db.session.commit()
        
        flash('Evolu√ß√£o registrada com sucesso!', 'success')
        return redirect(url_for('dashboard_psi.perfil_paciente', id=paciente.id))
    
    # Pr√©-preencher data de hoje
    if not form.data_sessao.data:
        from datetime import datetime
        form.data_sessao.data = datetime.now()
    
    return render_template('dashboard_psi/form_evolucao.html',
                         title='Nova Evolu√ß√£o',
                         form=form,
                         paciente=paciente)

@bp.route('/evolucoes/<int:id>/editar', methods=['GET', 'POST'])
@psicologo_required
def editar_evolucao(id):
    """Editar evolu√ß√£o existente"""
    evolucao = Evolucao.query.join(Paciente).filter(
        Evolucao.id == id,
        Paciente.psicologo_id == current_user.id
    ).first_or_404()
    
    form = EvolucaoForm(obj=evolucao)
    
    if form.validate_on_submit():
        evolucao.data_sessao = form.data_sessao.data
        evolucao.conteudo = form.conteudo.data  # Criptografia autom√°tica
        
        db.session.commit()
        
        flash('Evolu√ß√£o atualizada com sucesso!', 'success')
        return redirect(url_for('dashboard_psi.perfil_paciente', id=evolucao.paciente_id))
    
    # Pr√©-preencher formul√°rio (descriptografia autom√°tica)
    form.conteudo.data = evolucao.conteudo
    
    return render_template('dashboard_psi/form_evolucao.html',
                         title='Editar Evolu√ß√£o',
                         form=form,
                         paciente=evolucao.paciente,
                         evolucao=evolucao)

# --- API Routes (opcional) ---
@bp.route('/api/pacientes/search')
@psicologo_required
def api_search_pacientes():
    """API para busca de pacientes (AJAX)"""
    query = request.args.get('q', '')
    
    if len(query) < 2:
        return jsonify([])
    
    pacientes = (Paciente.query
                .filter_by(psicologo_id=current_user.id)
                .filter(Paciente.nome_completo.contains(query))
                .limit(10)
                .all())
    
    results = [
        {
            'id': p.id,
            'nome': p.nome_completo,
            'idade': p.idade,
            'total_evolucoes': len(p.evolucoes)
        }
        for p in pacientes
    ]
    
    return jsonify(results)
'''
    
    routes_file = module_dir / "routes.py"
    with open(routes_file, 'w', encoding='utf-8') as f:
        f.write(routes_content)
    
    print("   ‚úÖ routes.py adaptado criado")

def create_integration_example(module_dir):
    """Cria exemplo de integra√ß√£o no app principal"""
    
    integration_example = '''# Exemplo de integra√ß√£o no app principal

# 1. No arquivo app/__init__.py:
def create_app():
    app = Flask(__name__)
    # ... configura√ß√µes existentes ...
    
    # Registrar blueprint do dashboard
    from app.dashboard_psi import bp as dashboard_bp
    app.register_blueprint(dashboard_bp)
    
    return app

# 2. Adicionar ao modelo User (app/models.py):
class User(UserMixin, db.Model):
    # ... campos existentes ...
    
    # Campos para psic√≥logos
    crp = db.Column(db.String(20), nullable=True)
    especialidades = db.Column(db.Text, nullable=True)
    
    # Relacionamento com pacientes
    pacientes = db.relationship('Paciente', backref='psicologo', lazy='dynamic')
    
    def is_psicologo(self):
        return self.crp is not None and self.crp.strip() != ''

# 3. No template base (templates/base.html):
{% if current_user.is_authenticated and current_user.is_psicologo() %}
<li class="nav-item">
    <a class="nav-link" href="{{ url_for('dashboard_psi.dashboard') }}">
        Dashboard Psicologia
    </a>
</li>
{% endif %}

# 4. Migra√ß√£o do banco:
flask db migrate -m "Add psicologia dashboard"
flask db upgrade
'''
    
    example_file = module_dir / "INTEGRATION_EXAMPLE.py"
    with open(example_file, 'w', encoding='utf-8') as f:
        f.write(integration_example)
    
    print("   ‚úÖ INTEGRATION_EXAMPLE.py criado")

def create_requirements(module_dir):
    """Cria arquivo de depend√™ncias do m√≥dulo"""
    
    requirements = '''# Depend√™ncias do Dashboard Psicologia

# J√° devem estar instaladas no projeto principal:
Flask>=2.0.0
Flask-SQLAlchemy>=3.0.0
Flask-Login>=0.6.0
Flask-WTF>=1.1.0
WTForms>=3.0.0

# Espec√≠ficas do dashboard:
cryptography>=41.0.0  # Para criptografia das evolu√ß√µes
'''
    
    req_file = module_dir / "requirements.txt"
    with open(req_file, 'w', encoding='utf-8') as f:
        f.write(requirements)
    
    print("   ‚úÖ requirements.txt criado")

def create_module_readme(module_dir):
    """Cria documenta√ß√£o do m√≥dulo"""
    
    readme_content = '''# Dashboard Psicologia - M√≥dulo de Integra√ß√£o

Este √© um m√≥dulo Flask independente para gerenciamento de pacientes e evolu√ß√µes cl√≠nicas, desenvolvido para ser integrado em aplica√ß√µes Flask existentes.

## üéØ Caracter√≠sticas

- **Modular**: Blueprint independente com namespace pr√≥prio
- **Seguro**: Criptografia autom√°tica dos dados sens√≠veis
- **Responsivo**: Interface moderna com Bootstrap 5
- **Compat√≠vel**: Integra-se facilmente com sistemas Flask existentes

## üì¶ Estrutura do M√≥dulo

```
dashboard_psi/
‚îú‚îÄ‚îÄ __init__.py              # Configura√ß√£o do Blueprint
‚îú‚îÄ‚îÄ routes.py                # Rotas do dashboard
‚îú‚îÄ‚îÄ models.py                # Modelos de dados
‚îú‚îÄ‚îÄ forms.py                 # Formul√°rios WTF
‚îú‚îÄ‚îÄ utils.py                 # Utilit√°rios (criptografia)
‚îú‚îÄ‚îÄ templates/
‚îÇ   ‚îî‚îÄ‚îÄ dashboard_psi/       # Templates com namespace
‚îú‚îÄ‚îÄ static/
‚îÇ   ‚îú‚îÄ‚îÄ css/                 # Estilos personalizados
‚îÇ   ‚îî‚îÄ‚îÄ js/                  # Scripts JavaScript
‚îî‚îÄ‚îÄ requirements.txt         # Depend√™ncias
```

## üöÄ Instala√ß√£o

### 1. Copiar M√≥dulo

```bash
# Copie a pasta para seu projeto
cp -r dashboard_psi_module/ /caminho/para/seu/projeto/app/dashboard_psi/
```

### 2. Instalar Depend√™ncias

```bash
pip install cryptography>=41.0.0
```

### 3. Registrar Blueprint

No arquivo `app/__init__.py`:

```python
def create_app():
    app = Flask(__name__)
    # ... suas configura√ß√µes ...
    
    # Registrar dashboard psicologia
    from app.dashboard_psi import bp as dashboard_bp
    app.register_blueprint(dashboard_bp)
    
    return app
```

### 4. Configurar Modelo User

Adicione campos ao seu modelo User existente:

```python
class User(UserMixin, db.Model):
    # ... campos existentes ...
    
    # Campos para psic√≥logos
    crp = db.Column(db.String(20), nullable=True)
    especialidades = db.Column(db.Text, nullable=True)
    
    def is_psicologo(self):
        return self.crp is not None and self.crp.strip() != ''
```

### 5. Configurar Criptografia

No arquivo `.env`:

```env
ENCRYPTION_KEY=sua_chave_de_criptografia_aqui
```

Para gerar uma chave:

```bash
python3 -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())"
```

### 6. Executar Migra√ß√µes

```bash
flask db migrate -m "Add dashboard psicologia"
flask db upgrade
```

## üåê URLs Dispon√≠veis

- `/dashboard-psicologia/` - Dashboard principal
- `/dashboard-psicologia/pacientes` - Lista de pacientes
- `/dashboard-psicologia/pacientes/novo` - Cadastrar paciente
- `/dashboard-psicologia/pacientes/<id>` - Perfil do paciente
- `/dashboard-psicologia/pacientes/<id>/evolucoes/nova` - Nova evolu√ß√£o

## üîê Seguran√ßa

### Controle de Acesso

O m√≥dulo usa o decorator `@psicologo_required` que:

1. Verifica se o usu√°rio est√° autenticado
2. Confirma se possui CRP (√© psic√≥logo)
3. Bloqueia acesso caso contr√°rio

### Criptografia

- Evolu√ß√µes s√£o automaticamente criptografadas
- Chave configur√°vel via vari√°vel de ambiente
- Descriptografia transparente na leitura

## üé® Personaliza√ß√£o

### Templates

Os templates est√£o em `templates/dashboard_psi/` e podem ser customizados:

- `dashboard.html` - P√°gina principal
- `form_paciente.html` - Formul√°rio de pacientes
- `perfil_paciente.html` - Perfil e hist√≥rico
- `form_evolucao.html` - Formul√°rio de evolu√ß√µes

### Estilos

CSS personalizado em `static/css/styles.css` com:

- Vari√°veis CSS para cores
- Tema verde profissional
- Responsividade mobile
- Anima√ß√µes suaves

## üß™ Testes

Para testar a integra√ß√£o:

```python
# Criar usu√°rio psic√≥logo
user = User(email='psi@teste.com', crp='06/12345')
user.set_password('senha123')
db.session.add(user)
db.session.commit()

# Acessar: /dashboard-psicologia/
```

## ‚öôÔ∏è Configura√ß√µes Opcionais

### Menu de Navega√ß√£o

Adicione ao template base do seu site:

```html
{% if current_user.is_authenticated and current_user.is_psicologo() %}
<li class="nav-item">
    <a class="nav-link" href="{{ url_for('dashboard_psi.dashboard') }}">
        Dashboard Psicologia
    </a>
</li>
{% endif %}
```

### Permiss√µes Avan√ßadas

Para controle mais granular, modifique o decorator em `routes.py`:

```python
def psicologo_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        # Suas valida√ß√µes personalizadas aqui
        return f(*args, **kwargs)
    return decorated_function
```

## üîß Troubleshooting

### Erro: Template n√£o encontrado
- Verifique se o m√≥dulo est√° registrado corretamente
- Confirme se `template_folder='templates'` est√° no Blueprint

### Erro: Static files n√£o carregam
- Verifique se `static_folder='static'` est√° no Blueprint
- Confirme o `static_url_path='/dashboard-psi/static'`

### Erro: Banco de dados
- Execute `flask db migrate` e `flask db upgrade`
- Verifique se as tabelas foram criadas

### Erro: Criptografia
- Configure a vari√°vel `ENCRYPTION_KEY`
- Instale `cryptography>=41.0.0`

## üìû Suporte

Este m√≥dulo foi desenvolvido para ser:
- ‚úÖ Independente da aplica√ß√£o principal
- ‚úÖ F√°cil de integrar e remover
- ‚úÖ Compat√≠vel com diferentes estruturas Flask
- ‚úÖ Seguro e conforme com LGPD

Para d√∫vidas ou customiza√ß√µes, consulte os arquivos:
- `INTEGRATION_EXAMPLE.py` - Exemplos pr√°ticos
- `routes.py` - L√≥gica das rotas
- `models.py` - Estrutura dos dados

---
**Dashboard Psicologia** - Vers√£o modular para integra√ß√£o
'''
    
    readme_file = module_dir / "README.md"
    with open(readme_file, 'w', encoding='utf-8') as f:
        f.write(readme_content)
    
    print("   ‚úÖ README.md criado")

def update_template_paths(module_dir):
    """Atualiza os paths dos templates para o namespace do m√≥dulo (apenas nas c√≥pias)"""
    
    print("\nüîß Atualizando paths nos templates (apenas nas c√≥pias)...")
    
    templates_dir = module_dir / "templates" / "dashboard_psi"
    
    # Mapeamento de substitui√ß√µes para integra√ß√£o
    replacements = {
        "url_for('main.dashboard')": "url_for('dashboard_psi.dashboard')",
        "url_for('dashboard')": "url_for('dashboard_psi.dashboard')",
        "url_for('listar_pacientes')": "url_for('dashboard_psi.listar_pacientes')",
        "url_for('novo_paciente')": "url_for('dashboard_psi.novo_paciente')",
        "url_for('perfil_paciente'": "url_for('dashboard_psi.perfil_paciente'",
        "url_for('nova_evolucao'": "url_for('dashboard_psi.nova_evolucao'",
        "url_for('editar_evolucao'": "url_for('dashboard_psi.editar_evolucao'",
        "url_for('main.login')": "url_for('auth.login')",  # Assumindo blueprint auth
        "url_for('login')": "url_for('auth.login')",
        "url_for('logout')": "url_for('auth.logout')",
        "{{ url_for('static'": "{{ url_for('dashboard_psi.static'",
        "'css/styles.css'": "'css/styles.css'",  # Manter como est√° dentro do blueprint
        "'js/dashboard.js'": "'js/dashboard.js'"   # Manter como est√° dentro do blueprint
    }
    
    if not templates_dir.exists():
        print("   ‚ö†Ô∏è  Diret√≥rio de templates n√£o encontrado")
        return
    
    for template_file in templates_dir.glob("*.html"):
        if template_file.is_file():
            try:
                content = template_file.read_text(encoding='utf-8')
                
                # Aplicar substitui√ß√µes
                original_content = content
                for old, new in replacements.items():
                    content = content.replace(old, new)
                
                # Salvar apenas se houve mudan√ßas
                if content != original_content:
                    template_file.write_text(content, encoding='utf-8')
                    print(f"   ‚úÖ {template_file.name} atualizado")
                else:
                    print(f"   üìÑ {template_file.name} (sem altera√ß√µes necess√°rias)")
                    
            except Exception as e:
                print(f"   ‚ùå Erro ao processar {template_file.name}: {e}")
    
    print("üîí Templates originais permanecem intactos!")

def main():
    """Fun√ß√£o principal do script"""
    
    print("üîÑ Criando m√≥dulo Dashboard Psicologia para integra√ß√£o")
    print("üîí Mantendo aplica√ß√£o original INTACTA")
    print("=" * 60)
    
    try:
        # 1. Criar estrutura do m√≥dulo separado
        module_dir = create_module_structure()
        
        # 2. Copiar arquivos (mantendo originais intactos)
        copy_and_adapt_files(module_dir)
        
        # 3. Criar arquivos espec√≠ficos do m√≥dulo
        create_module_init(module_dir)
        create_adapted_routes(module_dir)
        create_integration_example(module_dir)
        create_requirements(module_dir)
        
        # 4. Atualizar templates nas c√≥pias
        update_template_paths(module_dir)
        
        # 5. Criar README do m√≥dulo
        create_module_readme(module_dir)
        
        print("\n" + "=" * 60)
        print("‚úÖ M√ìDULO CRIADO COM SUCESSO!")
        print("üîí Aplica√ß√£o original permanece INTACTA")
        print(f"\nüìÅ Localiza√ß√£o do m√≥dulo: {module_dir}")
        
        print("\nÔøΩ Conte√∫do do m√≥dulo:")
        print("   ‚îú‚îÄ‚îÄ __init__.py              (Blueprint configuration)")
        print("   ‚îú‚îÄ‚îÄ routes.py                (Rotas adaptadas)")
        print("   ‚îú‚îÄ‚îÄ models.py                (Modelos copiados)")
        print("   ‚îú‚îÄ‚îÄ forms.py                 (Formul√°rios copiados)")
        print("   ‚îú‚îÄ‚îÄ utils.py                 (Utilit√°rios copiados)")
        print("   ‚îú‚îÄ‚îÄ requirements.txt         (Depend√™ncias)")
        print("   ‚îú‚îÄ‚îÄ INTEGRATION_EXAMPLE.py   (Guia de integra√ß√£o)")
        print("   ‚îú‚îÄ‚îÄ README.md                (Documenta√ß√£o)")
        print("   ‚îú‚îÄ‚îÄ config_reference.py      (Config para refer√™ncia)")
        print("   ‚îú‚îÄ‚îÄ templates/")
        print("   ‚îÇ   ‚îî‚îÄ‚îÄ dashboard_psi/       (Templates adaptados)")
        print("   ‚îî‚îÄ‚îÄ static/")
        print("       ‚îú‚îÄ‚îÄ css/                 (Estilos copiados)")
        print("       ‚îú‚îÄ‚îÄ js/                  (Scripts copiados)")
        print("       ‚îî‚îÄ‚îÄ img/                 (Imagens copiadas)")
        
        print("\nüìã Como usar:")
        print("   1. Copie toda pasta 'dashboard_psi_module' para seu projeto")
        print("   2. Renomeie para 'dashboard_psi' dentro de app/")
        print("   3. Siga instru√ß√µes em INTEGRATION_EXAMPLE.py")
        print("   4. Leia README.md para detalhes de integra√ß√£o")
        
        print("\nüåê URLs que estar√£o dispon√≠veis:")
        print("   /dashboard-psicologia/")
        print("   /dashboard-psicologia/pacientes")
        print("   /dashboard-psicologia/pacientes/novo")
        print("   /dashboard-psicologia/pacientes/<id>")
        print("   /dashboard-psicologia/pacientes/<id>/evolucoes/nova")
        
        print("\nüí° Vantagens desta abordagem:")
        print("   ‚úÖ Aplica√ß√£o original permanece funcional")
        print("   ‚úÖ M√≥dulo independente e reutiliz√°vel")
        print("   ‚úÖ F√°cil de integrar e remover")
        print("   ‚úÖ Namespace pr√≥prio evita conflitos")
        print("   ‚úÖ Pode ser versionado separadamente")
        
    except Exception as e:
        print(f"\n‚ùå Erro durante a cria√ß√£o: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == '__main__':
    main()
